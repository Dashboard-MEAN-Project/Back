{"version":3,"sources":["categoryController.js"],"names":["CategoryModel","require","createCategory","req","res","title","cloudinaryResult","newCategory","regeneratorRuntime","async","_context","prev","next","console","body","log","abrupt","status","json","message","awrap","uploadMedia","file","sent","create","secure_url","t0","imageUrl","stop","find","categories","msg","error","totaleCategory","length","_context2","UpdateCategory","id","_req$body","_context3","params","findByIdAndUpdate","new","getAllCategory","deletecategory","_context4","findById","findByIdAndDelete"],"mappings":"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","file":"categoryController.min.js","sourcesContent":["\r\nconst CategoryModel=require('../models/category')\r\nconst uploadMedia =require('../middleware/cloudinaryConfig')\r\n\r\n\r\n\r\n// router.post('/upload', upload.single('image'), function (req, res) {\r\n   \r\n//   });\r\n\r\n// const createCategory =async(req,res)=>{\r\n//     try{\r\n//         const {title, imageUrl}= req.body\r\n//         if(!title || ! imageUrl){\r\n//             return res.status(500).json({message:\"please provide category title or image\"})\r\n//         }\r\n//         const newCategory = new CategoryModel({title,imageUrl})\r\n//         await newCategory.save()\r\n//         res.status(201).json({message:\"category created\"})\r\n//     } catch (error){\r\n// return res.status(500).json({message:\"Error in create Category api\"})\r\n//     }\r\n\r\n// }\r\n\r\n\r\nconst createCategory=async (req, res) => {\r\n     \r\n    const { title } = req.body;\r\n    console.log(\"create Ctegory\")\r\nif(!title)\r\n{\r\n    return res.status(400).json({ message: 'Title is required' });\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    try {\r\n        const cloudinaryResult = await uploadMedia(req.file);\r\n        console.log(cloudinaryResult)\r\n        // const newContent = await CategoryModel.create({ title,imageUrl:req.file.path });\r\n        const newCategory = await CategoryModel.create({\r\n            title: req.body.title,\r\n            imageUrl: cloudinaryResult.secure_url\r\n            \r\n        });\r\n        res.json(newCategory);\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ message: 'Server Error' });\r\n    }\r\n}\r\n\r\n\r\nconst getAllCategory =async(req,res)=>{\r\n    try{\r\nconst categories = await CategoryModel.find({})\r\nif(!categories)\r\n{\r\n    return res.status(404).json({msg:\"No Categories Found\"})\r\n}\r\nres.status(200).json({success:true, totaleCategory:categories.length ,categories})\r\n    }catch(error){\r\nres.status(500).json({msg:\"Error in get All category Api\",error})\r\n    }\r\n}\r\n\r\nconst UpdateCategory = async(req,res)=>{\r\n    try{\r\nconst {id}= req.params;\r\nconst {title,imageUrl}=req.body\r\nconst update = await CategoryModel.findByIdAndUpdate(id,{title,imageUrl},{new: true})\r\nif(!update)\r\n{\r\n    return res.status(500).json({msg:\"no category Found\"})\r\n}\r\nres.status(200).json({msg:\"category updated successfully\"})\r\n    }catch(error){\r\nres.status(500).json({msg:\"Error in update category Api\",error})\r\n    }\r\n}\r\n\r\n\r\nconst deletecategory = async(req,res)=>{\r\n    try{\r\nconst {id}=req.params\r\nif(! id){\r\n    return res.status(500).json({msg:\"please provide category ID\"})\r\n}\r\nconst category = await CategoryModel.findById(id)\r\nif(! category)\r\n{\r\n    res.status(500).json({msg:\"No category found with this ID\"})\r\n}\r\nawait CategoryModel.findByIdAndDelete(id)\r\nres.status(200).json({msg:\"category Deleted successfully\"})\r\n    }catch(error){\r\n        res.status(500).json({msg:\"Error in Delete category Api\",error})\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports={\r\n    createCategory,\r\n    getAllCategory,\r\n    UpdateCategory,\r\n    deletecategory\r\n}"]}