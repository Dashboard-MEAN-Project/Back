{"version":3,"sources":["categoryController.js"],"names":["CategoryModel","require","uploadMedia","createCategory","req","res","title","body","console","log","status","json","message","file","cloudinaryResult","create","imageUrl","secure_url","newCategory","error","getAllCategory","find","categories","msg","success","totaleCategory","length","UpdateCategory","id","params","findByIdAndUpdate","update","deletecategory","findById","category","findByIdAndDelete","module","exports"],"mappings":";;AACA,IAAMA,aAAa,GAACC,OAAO,CAAC,oBAAD,CAA3B;;AACA,IAAMC,WAAW,GAAED,OAAO,CAAC,gCAAD,CAA1B,C,CAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA,IAAME,cAAc,GAAC,SAAfA,cAAe,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAETC,UAAAA,KAFS,GAECF,GAAG,CAACG,IAFL,CAETD,KAFS;AAGjBE,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;;AAHiB,cAIjBH,KAJiB;AAAA;AAAA;AAAA;;AAAA,2CAMVD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB,CANU;;AAAA;AAAA;AAAA;AAAA,0CAckBV,WAAW,CAACE,GAAG,CAACS,IAAL,CAd7B;;AAAA;AAcPC,UAAAA,gBAdO;AAebN,UAAAA,OAAO,CAACC,GAAR,CAAYK,gBAAZ,EAfa,CAgBb;;AAhBa;AAAA,0CAiBad,aAAa,CAACe,MAAd,CAAqB;AAC3CT,YAAAA,KAAK,EAAEF,GAAG,CAACG,IAAJ,CAASD,KAD2B;AAE3CU,YAAAA,QAAQ,EAAEF,gBAAgB,CAACG;AAFgB,WAArB,CAjBb;;AAAA;AAiBPC,UAAAA,WAjBO;AAsBbb,UAAAA,GAAG,CAACM,IAAJ,CAASO,WAAT;AAtBa;AAAA;;AAAA;AAAA;AAAA;AAwBbV,UAAAA,OAAO,CAACW,KAAR;AACAd,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAzBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AA8BA,IAAMQ,cAAc,GAAE,SAAhBA,cAAgB,CAAMhB,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEGL,aAAa,CAACqB,IAAd,CAAmB,EAAnB,CAFH;;AAAA;AAEhBC,UAAAA,UAFgB;;AAAA,cAGlBA,UAHkB;AAAA;AAAA;AAAA;;AAAA,4CAKXjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC;AAAL,WAArB,CALW;;AAAA;AAOtBlB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACa,YAAAA,OAAO,EAAC,IAAT;AAAeC,YAAAA,cAAc,EAACH,UAAU,CAACI,MAAzC;AAAiDJ,YAAAA,UAAU,EAAVA;AAAjD,WAArB;AAPsB;AAAA;;AAAA;AAAA;AAAA;AAStBjB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC,+BAAL;AAAqCJ,YAAAA,KAAK;AAA1C,WAArB;;AATsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;;AAaA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAMvB,GAAN,EAAUC,GAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhBuB,UAAAA,EAFgB,GAEXxB,GAAG,CAACyB,MAFO,CAEhBD,EAFgB;AAAA,sBAGAxB,GAAG,CAACG,IAHJ,EAGhBD,KAHgB,aAGhBA,KAHgB,EAGVU,QAHU,aAGVA,QAHU;AAAA;AAAA,0CAIFhB,aAAa,CAAC8B,iBAAd,CAAgCF,EAAhC,EAAmC;AAACtB,YAAAA,KAAK,EAALA,KAAD;AAAOU,YAAAA,QAAQ,EAARA;AAAP,WAAnC,EAAoD;AAAC,mBAAK;AAAN,WAApD,CAJE;;AAAA;AAIjBe,UAAAA,MAJiB;;AAAA,cAKnBA,MALmB;AAAA;AAAA;AAAA;;AAAA,4CAOZ1B,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC;AAAL,WAArB,CAPY;;AAAA;AASvBlB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC;AAAL,WAArB;AATuB;AAAA;;AAAA;AAAA;AAAA;AAWvBlB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC,8BAAL;AAAoCJ,YAAAA,KAAK;AAAzC,WAArB;;AAXuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAgBA,IAAMa,cAAc,GAAG,SAAjBA,cAAiB,CAAM5B,GAAN,EAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhBuB,UAAAA,EAFgB,GAEZxB,GAAG,CAACyB,MAFQ,CAEhBD,EAFgB;;AAAA,cAGlBA,EAHkB;AAAA;AAAA;AAAA;;AAAA,4CAIZvB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC;AAAL,WAArB,CAJY;;AAAA;AAAA;AAAA,0CAMAvB,aAAa,CAACiC,QAAd,CAAuBL,EAAvB,CANA;;AAAA;AAMjBM,UAAAA,QANiB;;AAOvB,cAAG,CAAEA,QAAL,EACA;AACI7B,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,cAAAA,GAAG,EAAC;AAAL,aAArB;AACH;;AAVsB;AAAA,0CAWjBvB,aAAa,CAACmC,iBAAd,CAAgCP,EAAhC,CAXiB;;AAAA;AAYvBvB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC;AAAL,WAArB;AAZuB;AAAA;;AAAA;AAAA;AAAA;AAcflB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACY,YAAAA,GAAG,EAAC,8BAAL;AAAoCJ,YAAAA,KAAK;AAAzC,WAArB;;AAde;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AA0BAiB,MAAM,CAACC,OAAP,GAAe;AACXlC,EAAAA,cAAc,EAAdA,cADW;AAEXiB,EAAAA,cAAc,EAAdA,cAFW;AAGXO,EAAAA,cAAc,EAAdA,cAHW;AAIXK,EAAAA,cAAc,EAAdA;AAJW,CAAf","sourcesContent":["\r\nconst CategoryModel=require('../models/category')\r\nconst uploadMedia =require('../middleware/cloudinaryConfig')\r\n\r\n\r\n\r\n// router.post('/upload', upload.single('image'), function (req, res) {\r\n   \r\n//   });\r\n\r\n// const createCategory =async(req,res)=>{\r\n//     try{\r\n//         const {title, imageUrl}= req.body\r\n//         if(!title || ! imageUrl){\r\n//             return res.status(500).json({message:\"please provide category title or image\"})\r\n//         }\r\n//         const newCategory = new CategoryModel({title,imageUrl})\r\n//         await newCategory.save()\r\n//         res.status(201).json({message:\"category created\"})\r\n//     } catch (error){\r\n// return res.status(500).json({message:\"Error in create Category api\"})\r\n//     }\r\n\r\n// }\r\n\r\n\r\nconst createCategory=async (req, res) => {\r\n     \r\n    const { title } = req.body;\r\n    console.log(\"create Ctegory\")\r\nif(!title)\r\n{\r\n    return res.status(400).json({ message: 'Title is required' });\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    try {\r\n        const cloudinaryResult = await uploadMedia(req.file);\r\n        console.log(cloudinaryResult)\r\n        // const newContent = await CategoryModel.create({ title,imageUrl:req.file.path });\r\n        const newCategory = await CategoryModel.create({\r\n            title: req.body.title,\r\n            imageUrl: cloudinaryResult.secure_url\r\n            \r\n        });\r\n        res.json(newCategory);\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ message: 'Server Error' });\r\n    }\r\n}\r\n\r\n\r\nconst getAllCategory =async(req,res)=>{\r\n    try{\r\nconst categories = await CategoryModel.find({})\r\nif(!categories)\r\n{\r\n    return res.status(404).json({msg:\"No Categories Found\"})\r\n}\r\nres.status(200).json({success:true, totaleCategory:categories.length ,categories})\r\n    }catch(error){\r\nres.status(500).json({msg:\"Error in get All category Api\",error})\r\n    }\r\n}\r\n\r\nconst UpdateCategory = async(req,res)=>{\r\n    try{\r\nconst {id}= req.params;\r\nconst {title,imageUrl}=req.body\r\nconst update = await CategoryModel.findByIdAndUpdate(id,{title,imageUrl},{new: true})\r\nif(!update)\r\n{\r\n    return res.status(500).json({msg:\"no category Found\"})\r\n}\r\nres.status(200).json({msg:\"category updated successfully\"})\r\n    }catch(error){\r\nres.status(500).json({msg:\"Error in update category Api\",error})\r\n    }\r\n}\r\n\r\n\r\nconst deletecategory = async(req,res)=>{\r\n    try{\r\nconst {id}=req.params\r\nif(! id){\r\n    return res.status(500).json({msg:\"please provide category ID\"})\r\n}\r\nconst category = await CategoryModel.findById(id)\r\nif(! category)\r\n{\r\n    res.status(500).json({msg:\"No category found with this ID\"})\r\n}\r\nawait CategoryModel.findByIdAndDelete(id)\r\nres.status(200).json({msg:\"category Deleted successfully\"})\r\n    }catch(error){\r\n        res.status(500).json({msg:\"Error in Delete category Api\",error})\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports={\r\n    createCategory,\r\n    getAllCategory,\r\n    UpdateCategory,\r\n    deletecategory\r\n}"],"file":"categoryController.dev.js"}